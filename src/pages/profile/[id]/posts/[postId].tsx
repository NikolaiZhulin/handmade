import { QueryClient, dehydrate, useHydrate } from '@tanstack/react-query';
import { GetServerSidePropsContext, InferGetServerSidePropsType } from 'next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import Head from 'next/head';

import { getPostById } from '@/api/posts/post-by-id';
import Footer from '@/components/Footer';
import Header from '@/components/Header';
import PostEdit from '@/components/PostEdit';
import ProfileLeftBlock from '@/components/Profile/ProfileLeftBlock';
import ProfilePageLayout from '@/containers/pages/ProfilePageLayout';

export const getServerSideProps = async (context: GetServerSidePropsContext) => {
  const { postId } = context.params ?? {};
  const queryClient = new QueryClient();

  await queryClient.prefetchQuery({
    queryKey: [],
    queryFn: () => getPostById({ id: (postId as string) ?? '' }),
  });

  return {
    props: {
      post: dehydrate(queryClient),
      postId: postId,
      ...(await serverSideTranslations(context.locale ?? context.defaultLocale ?? '', ['common'])),
    },
  };
};

export default function Home({
  post,
  postId,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  useHydrate(post);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <ProfilePageLayout
        left={<ProfileLeftBlock />}
        right={<PostEdit postId={postId as string} />}
      />
      <Footer />
    </>
  );
}
